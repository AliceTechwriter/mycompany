MODULE TimesheetSupervisor;

REQUIRE DateUtils, ProjectManagementSettings, Employee, 
        ProjectTimeEntry, ProjectAssignment, TimeEntryHours;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

timesheetProject = DATA LOCAL NESTED Project ();
nameTimesheetProject 'Project' = name(timesheetProject());

timesheetTimeEntryType = DATA LOCAL TimeEntryType ();
nameTimesheetTimeEntryType 'Time entry type' = name(timesheetTimeEntryType());

timesheetTimeEntryHours = DATA LOCAL TimeEntryHours ();
nameTimesheetTimeEntryHours 'Hours' = hours(timesheetTimeEntryHours());
WHEN LOCAL CHANGED(timesheetTimeEntryType()) DO timesheetTimeEntryHours() <- defaultHours(timesheetTimeEntryType());
CONSTRAINT timesheetTimeEntryHours() AND NOT type(timesheetTimeEntryHours()) = timesheetTimeEntryType() 
    CHECKED BY timesheetTimeEntryHours[] MESSAGE '';

rolesTimesheet 'Roles' (Employee e) = roles(timesheetProject(), e);

hoursTimesheet 'Hours' (DATE d, Employee e)= 
    IF timesheetProject() THEN hours(d, e, timesheetProject())
                          ELSE hours(d, e);

backgroundHoursTimesheet 'Hours' (DATE d, Employee e)=
    IF countTimeEntryType(d, e) > 1 THEN RGB(255,192,0) ELSE
        OVERRIDE 
                IF timesheetProject() THEN rgbColor(type(timeEntry(d, e, timesheetProject())))
                                      ELSE rgbColor(type(timeEntry(d, e))),
                RGB(255,224,224) IF extractDOWNumber(d) = 0 OR extractDOWNumber(d) = 6;

FORM timesheetSupervisorDateEmployee 'Time entries'
    OBJECTS d = DATE PANEL
    OBJECTS e = Employee PANEL

    OBJECTS t = TimeEntry
    PROPERTIES(t) READONLY nameProject SHOWIF NOT timesheetProject(), hours, nameType, description
    PROPERTIES(t) EDIT, DELETE
    FILTERS date(t) = d,
            employee(t) = e,
            project(t) = timesheetProject() OR NOT timesheetProject()
;

changeTimesheetHours (DATE d, Employee e, TimeEntryType et, NUMERIC[8,2] n) {
    IF n THEN {
        IF timesheetProject() THEN {
            IF NOT timeEntry(d, e, timesheetProject(), et) THEN NEW t = TimeEntry {
                project(t) <- timesheetProject();
                type(t) <- et;
                employee(t) <- e;
                date(t) <- d;
            }
            hours(timeEntry(d, e, timesheetProject(), et)) <- n;
        } ELSE {
            IF NOT timeEntry(d, e, et) THEN NEW t = TimeEntry {
                type(t) <- et;
                employee(t) <- e;
                date(t) <- d;
            }
            hours(timeEntry(d, e, et)) <- n;
        }
    } ELSE
        DELETE TimeEntry t WHERE (project(t) = timesheetProject() OR NOT timesheetProject()) AND type(t) = et AND employee(t) = e AND date(t) = d;
    
}

FORM timesheetSupervisor 'Supervisor timesheet'
    OBJECTS dates = INTERVAL[DATE] PANEL NULL
    PROPERTIES dates '' = VALUE(dates)
    
    PROPERTIES() nameTimesheetProject, nameTimesheetTimeEntryType, 
                 nameTimesheetTimeEntryHours SHOWIF timesheetTimeEntryType() AND countHours(timesheetTimeEntryType()) 
    
    OBJECTS d = DATE
    FILTERS iterate(d, from(dates), to(dates))
    
    OBJECTS e = Employee
    PROPERTIES(e) READONLY firstName, lastName, namePosition, rolesTimesheet
    PROPERTIES hoursTimesheet(d, e) COLUMNS (d) HEADER extractDay(d) BACKGROUND backgroundHoursTimesheet(d, e)
               ON CHANGE {
                   FOR TimeEntryType et = timesheetTimeEntryType() AND (timesheetProject() OR NOT project(timeEntry(d, e, timesheetTimeEntryType()))) DO {
                       IF NOT timesheetTimeEntryHours() THEN {
                           INPUT n = NUMERIC[4,1] DO {
                               changeTimesheetHours(d, e, et, n);
                           }
                       } ELSE
                           changeTimesheetHours(d, e, et, hours(timesheetTimeEntryHours()) IF NOT hoursTimesheet(d, e));
                   } ELSE
                       SHOW timesheetSupervisorDateEmployee OBJECTS d = d, e = e FLOAT;
               }
    FILTERS assigned(timesheetProject(), e) OR (NOT countAssignments(timesheetProject()) AND NOT countAssignments(currentUser()))

    EVENTS ON INIT {
        timesheetProject() <- defaultProject(currentUser());
        timesheetTimeEntryType() <- defaultTimeEntryType();
        SEEK timesheetSupervisor.dates = interval(firstDayOfMonth(currentDate()), lastDayOfMonth(currentDate()));
    }
    PROPERTIES prevInterval '<' = { SEEK timesheetSupervisor.dates = prevMonthInterval(dates); },
               nextInterval '>' = { SEEK timesheetSupervisor.dates = nextMonthInterval(dates); }
;

DESIGN timesheetSupervisor {
    OBJECTS {
        NEW header {
            alignment = STRETCH;
            horizontal = TRUE;
            NEW interval {
                horizontal = TRUE;
                MOVE PROPERTY(prevInterval);
                MOVE PROPERTY(dates);
                MOVE PROPERTY(nextInterval);
            }
            MOVE PROPERTY(nameTimesheetProject()) { fill = 1; }
            NEW edit {
                fill = 2;
                NEW editRight {
                    alignment = END;
                    horizontal = TRUE;
                    MOVE PROPERTY(nameTimesheetTimeEntryHours()) {
                        caption = '';
                        placeholder = 'Hours';
                    }
                    MOVE PROPERTY(nameTimesheetTimeEntryType()) {
                        caption = '';
                        placeholder = 'Type';
                    }
                }
            }
        }
        MOVE BOX(e) {
            PROPERTY(hoursTimesheet(d, e)) { 
                charWidth = 2;
                valueTooltip = timeEntries(d, e);
            }
        }
    }
}

NAVIGATOR {
    dashboards {
        NEW timesheetSupervisor;
    }
}