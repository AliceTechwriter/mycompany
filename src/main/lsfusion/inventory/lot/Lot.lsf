MODULE Lot;

REQUIRE InventorySettings, Product;

NAMESPACE Inventory;

CLASS Lot 'Партия';

id 'Код' = DATA STRING[100] (Lot) CHARWIDTH 15;
lot (STRING[100] id) = GROUP AGGR Lot o BY id(o);

product 'Товар' = DATA Product (Lot) NONULL INDEXED;
idProduct 'Код товара' (Lot l) = id(product(l)) IN id;
nameProduct 'Товар' (Lot l) = name(product(l)) IN id;

useLot 'Партионный учет' = DATA BOOLEAN ();

EXTEND FORM options 
    PROPERTIES useLot()
;

DESIGN options {
    commons {
        MOVE PROPERTY(useLot());
    }
} 

META defineDocLot (doc, line, item, quantity, status, caption)
    quantity 'Кол-во'##caption = DATA NUMERIC[16,3] (line, Lot);
    
    lots###quantity 'Партии' (line l) = 
        GROUP CONCAT
            (CONCAT '', id(Lot lot) IF quantity(l, lot), '(' + (STRING(DOUBLE(quantity(l, lot))) IF (quantity(l, lot) != 1)) + ')'), 
            ',' CHARWIDTH 15; 
    
    quantity##Lot 'Кол-во партий'##caption (line rl) = GROUP SUM quantity(rl, Lot l);
    quantity##LotLeft (line rl) = quantity(rl) - OVERRIDE quantity##Lot(rl), 0;
       
    WHEN LOCAL CHANGED(quantity##Lot(line rl)) AND NOT status(doc(rl)) DO {
        quantity(rl) <- quantity##Lot(rl);
    }
    
    CONSTRAINT quantity(line rl, Lot l) AND item(rl) != product(l)
                    MESSAGE 'Строка для партии должна относится к тому же продукту, что и партия';
    CONSTRAINT SET(((OVERRIDE quantity(line rl), 0.0) - quantity##Lot(rl) < 0) AND status(doc(rl))) AND useLot(item(rl))
                    MESSAGE 'Несовпадение количества с количеством в партиях'##caption;                   
END 

META defineDocLot (doc, item, quantity, status, caption)
    @defineDocLot (doc, ###doc##Line, item, quantity, status, caption);
END

barCodeToLotId = ABSTRACT CASE STRING (STRING);

META defineDocBarCodeLot (doc, docLine, item, quantity)
    
    beforeProcessLotBarCode ABSTRACT (###doc, STRING);
    afterProcessLotBarCode ABSTRACT (###doc, STRING);
       
    processBarCode(###doc r, docLine rl, STRING s) + {
        LOCAL lotId = STRING();
        lotId() <- OVERRIDE barCodeToLotId(s), (s AS STRING);
         
        IF lot(lotId()) OR useLot(item(rl)) THEN {
            beforeProcessLotBarCode(r, lotId());
            
            LOCAL lot = Lot();
            lot() <- lot(lotId());
            
            IF NOT lot() THEN
                RETURN;
                 
            IF NOT product(lot()) THEN {
                product(lot()) <- item(rl);
            }
        
            LOCAL line = docLine();
            
            IF product(lot()) AND NOT product(lot()) = item(rl) THEN {
                IF NOT last##docLine(doc(rl), product(lot())) THEN {
                    NEW l = docLine {
                        doc(l) <- r;
                        item(l) <- product(lot());
                        line() <- l;
                    }
                } ELSE               
                    line() <- last##docLine(doc(rl), product(lot()));
                SEEK doc.l = line();            
            } ELSE
                line() <- rl;                      
                
            quantity(line(), lot()) <- quantity(line(), lot()) (+) 1;
            IF quantity##Lot(line()) > OVERRIDE quantity(line()), 0 THEN
                quantity(line()) <- quantity##Lot(line()); 
                    
            afterProcessLotBarCode(r, lotId());
            
            consumedBarCode() <- TRUE;
        }
    }
END

META defineDocBarCodeLot (doc, item, quantity)
    @defineDocBarCodeLot (doc, ###doc##Line, item, quantity);
END

META defineDocDesignLotTab(doc, quantity, item, container)
    EXTEND FORM doc
        PROPERTIES(l) AFTER quantity(l) SHOWIF useLot() BACKGROUND RGB(198,230,247) IF useLot(item(l)) 
                      quantity##Lot 
        
        OBJECTS lot = Lot
        PROPERTIES (lot) id READONLY
        PROPERTIES (l, lot) quantity READONLYIF NOT useLot(product(lot))
        FILTERS quantity(l, lot)   
    ;
    
    DESIGN doc {
        container {
            MOVE BOX(lot) {
                caption = 'Партии';
                showIf = useLot();
            }
        }
    }
    
    afterProcessLotBarCode(###doc d, STRING s) + {
        SEEK doc.lot = lot(s);
        ACTIVATE TAB doc.BOX(lot);
        ACTIVATE PROPERTY doc.quantity(l, lot); 
    }    
END

META defineLotCodeSearch(doc, quantity)
    ##doc##LotCode 'Партия' = DATA LOCAL STRING ();
    
    processLotCode ABSTRACT (###doc, STRING);
    
    searchLotCode(###doc##Line rl) {
        INPUT id = STRING DO {
            IF lot(id) OR useLot(product(rl)) THEN {        
                processLotCode (doc(rl), id);
                            
                IF NOT product(lot(id)) THEN {
                    product(lot(id)) <- product(rl);
                }
                
                IF product(lot(id)) != product(rl) THEN {
                    MESSAGE 'Партия относится к другому продукту (' + name(product(lot(id))) +')';
                } ELSE {                
                    quantity(rl, lot(id)) <- quantity(rl, lot(id)) (+) 1;
                    SEEK doc.lot = lot(id);
                    ACTIVATE PROPERTY doc.quantity(l, lot);                 
                }          
            }
        }
    }
    
    EXTEND FORM doc
        PROPERTIES() ##doc##LotCode DRAW lot TOOLBAR ON CHANGE searchLotCode(l) READONLYIF NOT useLot(product(l));
END

META defineDocLotGenerate(doc, quantity)
    generateLot 'Сгенерировать' (###doc##Line rl) {
        FOR Product p = product(rl) DO {
            FOR iterate(INTEGER i, 1, IF useSerialNumbers(p) THEN quantity##LotLeft(rl) ELSE 1) DO NEW l = Lot {
                incrementValue(numeratorLot(p));
                id(l) <- CONCAT '', prefixLot(p), incrementedValue();
                product(l) <- product(rl);
                
                quantity(rl, l) <- 1;
            }
        }        
    }
    
    EXTEND FORM doc
        PROPERTIES(l) generateLot DRAW lot SHOWIF numeratorLot(product(l)) AND quantity##LotLeft(l) > 0
    ;
END